plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "11"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework:spring-jdbc:5.3.14'
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.0'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.scalajs.npm:bcrypt_sjs0.6_2.12:1.0.2-4'
    implementation 'com.google.firebase:firebase-admin:9.1.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.7.5'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.11.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    additionalSourceDirs.setFrom(files("src/main/java"))
    sourceDirectories.setFrom(files("src/main/java"))
    classDirectories.setFrom(
            fileTree('build/classes/java/main').exclude(
                    'com/project/breakshop/controller/**' ,
                    'com/project/breakshop/utils/**',
                    'com/project/breakshop/exception/**',
                    'com/project/breakshop/models/**',
                    'com/project/breakshop/annotation/**',
                    'com/project/breakshop/config/**',
                    'com/project/breakshop/somepackage/**',
                    '**/BreakshopApplication.class'
            )
    )
    reports {
        xml.required = true
        csv.required = true
        html.destination = file("jacoco/jacocoHtml")
        xml.destination = file("jacoco/jacoco.xml")
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}
